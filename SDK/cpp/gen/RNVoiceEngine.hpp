// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#pragma once

#include "JavascriptCallback.hpp"
#include "ReactBridge.hpp"
#include <cstdint>
#include <memory>
#include <string>

/**----------------------------TALK---------------------------- */
class RNVoiceEngine {
public:
    virtual ~RNVoiceEngine() {}

    static std::shared_ptr<RNVoiceEngine> create(const std::shared_ptr<::ReactBridge> & bridge);

    /** 初始化 */
    virtual void Init(const std::string & appkey, const std::string & appsecret, int32_t model, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 加入语音频道 */
    virtual void JoinChannelSingleMode(const std::string & userID, const std::string & channel, int32_t userRole, bool checkRoomExist, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 退出所有语音频道 */
    virtual void LeaveChannelAll(const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 设置扬声器静音 */
    virtual void SetSpeakerMute(bool on, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 设置麦克风静音 */
    virtual void SetMicrophoneMute(bool mute, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 控制其他人的麦克风开关 */
    virtual void SetOtherMicMute(const std::string & userID, bool mute, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 选择消除其他人的语音 */
    virtual void SetListenOtherVoice(const std::string & userID, bool on, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    virtual void SetOutputToSpeaker(bool on, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    virtual void SetAutoSendStatus(bool on, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    virtual void requestRestApi(const std::string & strCommand, const std::string & strQueryBody, const std::shared_ptr<::JavascriptCallback> & callback) = 0;
};
