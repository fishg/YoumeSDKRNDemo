// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#pragma once

#include "JavascriptCallback.hpp"
#include "ReactBridge.hpp"
#include <cstdint>
#include <memory>
#include <string>

/**----------------------------消息管理---------------------------- */
class RNYIMMessageManager {
public:
    virtual ~RNYIMMessageManager() {}

    static std::shared_ptr<RNYIMMessageManager> create(const std::shared_ptr<::ReactBridge> & bridge);

    /** 发送文本消息（返回值 errorcode:int 错误码, requestID:string 请求ID） */
    virtual void SendTextMessage(const std::string & receiverID, int32_t chatType, const std::string & text,const std::string & extra, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 发送语音消息（返回值 errorcode:int 错误码, requestID:string 请求ID） */
    virtual void SendAudioMessage(const std::string & receiverID, int32_t chatType, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 发送语音消息（不带语音识别）（返回值 errorcode:int 错误码, requestID:string 请求ID） */
    virtual void SendOnlyAudioMessage(const std::string & receiverID, int32_t chatType, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 发送文件（返回值 errorcode:int 错误码, requestID:string 请求ID) */
    virtual void SendFile(const std::string & receiverID, int32_t chatType, const std::string & filePath, int32_t fileType, const std::string & extraParam, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 停止语音消息 */
    virtual void StopAudioMessage(const std::string & extraParam, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 取消语音消息 */
    virtual void CancelAudioMessage(const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 下载文件 */
    virtual void DownloadFile(const std::string & messageID, const std::string & savePath, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    /** 下载文件 */
    virtual void DownloadFileByUrl(const std::string & url, const std::string & savePath, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    virtual void SetMessageRead(const std::string & messageID, bool isRead, const std::shared_ptr<::JavascriptCallback> & callback) = 0;

    virtual void SetAllMessageRead(const std::string & userID, bool isRead, const std::shared_ptr<::JavascriptCallback> & callback) = 0;
};
