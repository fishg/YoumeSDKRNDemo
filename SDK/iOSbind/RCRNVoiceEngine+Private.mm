// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#import "RCRNVoiceEngine+Private.h"
#import "RCRNVoiceEngine.h"
#import "RVReactDjinni.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "RVJavascriptCallback+Private.h"
#import "RVReactBridge+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface RCRNVoiceEngine ()

- (id)initWithCpp:(const std::shared_ptr<::RNVoiceEngine>&)cppRef;

@end

@implementation RCRNVoiceEngine {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::RNVoiceEngine>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::RNVoiceEngine>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}
+ (NSString *)moduleName
{
    return @"RNVoiceEngine";
}

+ (nullable RCRNVoiceEngine *)create:(nullable id<RVReactBridge>)bridge {
    try {
        auto objcpp_result_ = ::RNVoiceEngine::create(::djinni_generated::ReactBridge::toCpp(bridge));
        return ::djinni_generated::RNVoiceEngine::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(Init:(nullable NSString *)appkey
             appsecret:(nullable NSString *)appsecret
                 model:(int)model
              callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->Init(::djinni::String::toCpp(appkey),
                                  ::djinni::String::toCpp(appsecret),
                                  ::djinni::I32::toCpp(model),
                                  ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(JoinChannelSingleMode:(nullable NSString *)userID
                                channel:(nullable NSString *)channel
                               userRole:(int)userRole
                         checkRoomExist:(BOOL)checkRoomExist
                               callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->JoinChannelSingleMode(::djinni::String::toCpp(userID),
                                                   ::djinni::String::toCpp(channel),
                                                   ::djinni::I32::toCpp(userRole),
                                                   ::djinni::Bool::toCpp(checkRoomExist),
                                                   ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(LeaveChannelAll:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->LeaveChannelAll(::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(SetSpeakerMute:(BOOL)on
                        callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->SetSpeakerMute(::djinni::Bool::toCpp(on),
                                            ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(SetMicrophoneMute:(BOOL)mute
                           callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->SetMicrophoneMute(::djinni::Bool::toCpp(mute),
                                               ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(SetOtherMicMute:(nullable NSString *)userID
                             mute:(BOOL)mute
                         callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->SetOtherMicMute(::djinni::String::toCpp(userID),
                                             ::djinni::Bool::toCpp(mute),
                                             ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(SetListenOtherVoice:(nullable NSString *)userID
                                   on:(BOOL)on
                             callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->SetListenOtherVoice(::djinni::String::toCpp(userID),
                                                 ::djinni::Bool::toCpp(on),
                                                 ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(SetOutputToSpeaker:(BOOL)on
                  callback:(nonnull RCTResponseSenderBlock)callback) {
  try {
    _cppRefHandle.get()->SetOutputToSpeaker(::djinni::Bool::toCpp(on),
                                           ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
  } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(SetAutoSendStatus:(BOOL)on
                  callback:(nonnull RCTResponseSenderBlock)callback) {
  try {
    _cppRefHandle.get()->SetAutoSendStatus(::djinni::Bool::toCpp(on),
                                           ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
  } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(RequestRestApi:(nullable NSString *)command
                  body: (nullable NSString *)body
                  callback:(nonnull RCTResponseSenderBlock)callback) {
  try {
    _cppRefHandle.get()->requestRestApi(::djinni::String::toCpp(command),
                                           ::djinni::String::toCpp(body),
                                           ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
  } DJINNI_TRANSLATE_EXCEPTIONS()
}


namespace djinni_generated {

auto RNVoiceEngine::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto RNVoiceEngine::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<RCRNVoiceEngine>(cpp);
}

}  // namespace djinni_generated

@end
