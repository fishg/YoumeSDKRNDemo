// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#import "RCRNYIMHistoryMessageManager+Private.h"
#import "RCRNYIMHistoryMessageManager.h"
#import "RVReactDjinni.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "RVJavascriptCallback+Private.h"
#import "RVReactBridge+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface RCRNYIMHistoryMessageManager ()

- (id)initWithCpp:(const std::shared_ptr<::RNYIMHistoryMessageManager>&)cppRef;

@end

@implementation RCRNYIMHistoryMessageManager {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::RNYIMHistoryMessageManager>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::RNYIMHistoryMessageManager>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}
+ (NSString *)moduleName
{
    return @"RNYIMHistoryMessageManager";
}

+ (nullable RCRNYIMHistoryMessageManager *)create:(nullable id<RVReactBridge>)bridge {
    try {
        auto objcpp_result_ = ::RNYIMHistoryMessageManager::create(::djinni_generated::ReactBridge::toCpp(bridge));
        return ::djinni_generated::RNYIMHistoryMessageManager::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(QueryHistoryMessage:(nullable NSString *)targetID
                             chatType:(int)chatType
                       startMessageID:(nullable NSString *)startMessageID
                                count:(int)count
                            direction:(int)direction
                             callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->QueryHistoryMessage(::djinni::String::toCpp(targetID),
                                                 ::djinni::I32::toCpp(chatType),
                                                 ::djinni::String::toCpp(startMessageID),
                                                 ::djinni::I32::toCpp(count),
                                                 ::djinni::I32::toCpp(direction),
                                                 ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(QueryRoomHistoryMessageFromServer:(nullable NSString *)roomID
                                              count:(int)count
                                          direction:(int)direction
                                           callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->QueryRoomHistoryMessageFromServer(::djinni::String::toCpp(roomID),
                                                               ::djinni::I32::toCpp(count),
                                                               ::djinni::I32::toCpp(direction),
                                                               ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(DeleteHistoryMessage:(nullable NSString *)targetID
                              chatType:(int)chatType
                        startMessageID:(nullable NSString *)startMessageID
                                 count:(int)count
                              callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->DeleteHistoryMessage(::djinni::String::toCpp(targetID),
                                                  ::djinni::I32::toCpp(chatType),
                                                  ::djinni::String::toCpp(startMessageID),
                                                  ::djinni::I32::toCpp(count),
                                                  ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(DeleteHistoryMessageByID:(nullable NSString *)messageID
                                  callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->DeleteHistoryMessageByID(::djinni::String::toCpp(messageID),
                                                      ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD( SetRoomHistoryMessageSwitch:(nullable NSString *)targetID
                               save:(BOOL)save
                  callback:(nonnull RCTResponseSenderBlock)callback){
  try {
    _cppRefHandle.get()->SetRoomHistoryMessageSwitch(::djinni::String::toCpp(targetID),
                                                     ::djinni::Bool::toCpp(save),
                                                  ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
  } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto RNYIMHistoryMessageManager::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto RNYIMHistoryMessageManager::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<RCRNYIMHistoryMessageManager>(cpp);
}

}  // namespace djinni_generated

@end
