// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#import "RCRNYIMChannelManager+Private.h"
#import "RCRNYIMChannelManager.h"
#import "RVReactDjinni.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "RVJavascriptCallback+Private.h"
#import "RVReactBridge+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface RCRNYIMChannelManager ()

- (id)initWithCpp:(const std::shared_ptr<::RNYIMChannelManager>&)cppRef;

@end

@implementation RCRNYIMChannelManager {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::RNYIMChannelManager>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::RNYIMChannelManager>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}
+ (NSString *)moduleName
{
    return @"RNYIMChannelManager";
}

+ (nullable RCRNYIMChannelManager *)create:(nullable id<RVReactBridge>)bridge {
    try {
        auto objcpp_result_ = ::RNYIMChannelManager::create(::djinni_generated::ReactBridge::toCpp(bridge));
        return ::djinni_generated::RNYIMChannelManager::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(JoinChannel:(nullable NSString *)channelID
                     callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->JoinChannel(::djinni::String::toCpp(channelID),
                                         ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(LeaveChannel:(nullable NSString *)channelID
                      callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->LeaveChannel(::djinni::String::toCpp(channelID),
                                          ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto RNYIMChannelManager::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto RNYIMChannelManager::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<RCRNYIMChannelManager>(cpp);
}

}  // namespace djinni_generated

@end
