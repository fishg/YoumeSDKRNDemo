// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#import "RCRNYIMManager+Private.h"
#import "RCRNYIMManager.h"
#import "RVReactDjinni.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "RVJavascriptCallback+Private.h"
#import "RVReactBridge+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface RCRNYIMManager ()

- (id)initWithCpp:(const std::shared_ptr<::RNYIMManager>&)cppRef;

@end

@implementation RCRNYIMManager {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::RNYIMManager>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::RNYIMManager>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}
+ (NSString *)moduleName
{
    return @"RNYIMManager";
}

+ (nullable RCRNYIMManager *)create:(nullable id<RVReactBridge>)bridge {
    try {
        auto objcpp_result_ = ::RNYIMManager::create(::djinni_generated::ReactBridge::toCpp(bridge));
        return ::djinni_generated::RNYIMManager::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(Init:(nullable NSString *)appkey
                secret:(nullable NSString *)secret
           packageName:(nullable NSString *)packageName
                 model:(int)model
              callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->Init(::djinni::String::toCpp(appkey),
                                  ::djinni::String::toCpp(secret),
                                  ::djinni::String::toCpp(packageName),
                                  ::djinni::I32::toCpp(model),
                                  ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(Login:(nullable NSString *)userID
               password:(nullable NSString *)password
                  token:(nullable NSString *)token
               callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        if(userID != nil && password != nil)
        _cppRefHandle.get()->Login(::djinni::String::toCpp(userID),
                                   ::djinni::String::toCpp(password),
                                   ::djinni::String::toCpp(token),
                                   ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(Logout:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->Logout(::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(StartPlayAudio:(nullable NSString *)path
                        callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->StartPlayAudio(::djinni::String::toCpp(path),
                                            ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(StopPlayAudio:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->StopPlayAudio(::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(GetRecentContacts:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->GetRecentContacts(::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(OnPause) {
    try {
        _cppRefHandle.get()->OnPause();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(OnResume) {
    try {
        _cppRefHandle.get()->OnResume();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(SetAudioRecordCacheDir:(nullable NSString *)path) {
    try {
        _cppRefHandle.get()->SetAudioRecordCacheDir(::djinni::String::toCpp(path));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(GetAudioCachePath:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->GetAudioCachePath(::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(ClearAudioCachePath) {
    try {
        _cppRefHandle.get()->ClearAudioCachePath();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(FilterKeyword:(nullable NSString *)text
                       callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->FilterKeyword(::djinni::String::toCpp(text),
                                           ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto RNYIMManager::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto RNYIMManager::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<RCRNYIMManager>(cpp);
}

}  // namespace djinni_generated

@end
