// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#import "RVJavascriptObject+Private.h"
#import "RVJavascriptObject.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "RVJavascriptArray+Private.h"
#import "RVJavascriptMap+Private.h"
#import "RVJavascriptType+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface RVJavascriptObject ()

- (id)initWithCpp:(const std::shared_ptr<::JavascriptObject>&)cppRef;

@end

@implementation RVJavascriptObject {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::JavascriptObject>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::JavascriptObject>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (RVJavascriptType)getType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getType();
        return ::djinni::Enum<::JavascriptType, RVJavascriptType>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isNull {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isNull();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable RVJavascriptObject *)fromNull {
    try {
        auto objcpp_result_ = ::JavascriptObject::fromNull();
        return ::djinni_generated::JavascriptObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)asBoolean {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asBoolean();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable RVJavascriptObject *)fromBoolean:(BOOL)value {
    try {
        auto objcpp_result_ = ::JavascriptObject::fromBoolean(::djinni::Bool::toCpp(value));
        return ::djinni_generated::JavascriptObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)asDouble {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asDouble();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable RVJavascriptObject *)fromDouble:(double)value {
    try {
        auto objcpp_result_ = ::JavascriptObject::fromDouble(::djinni::F64::toCpp(value));
        return ::djinni_generated::JavascriptObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)asInt {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asInt();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable RVJavascriptObject *)fromInt:(int32_t)value {
    try {
        auto objcpp_result_ = ::JavascriptObject::fromInt(::djinni::I32::toCpp(value));
        return ::djinni_generated::JavascriptObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)asString {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asString();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable RVJavascriptObject *)fromString:(nonnull NSString *)value {
    try {
        auto objcpp_result_ = ::JavascriptObject::fromString(::djinni::String::toCpp(value));
        return ::djinni_generated::JavascriptObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<RVJavascriptArray>)asArray {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asArray();
        return ::djinni_generated::JavascriptArray::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable RVJavascriptObject *)fromArray:(nullable id<RVJavascriptArray>)value {
    try {
        auto objcpp_result_ = ::JavascriptObject::fromArray(::djinni_generated::JavascriptArray::toCpp(value));
        return ::djinni_generated::JavascriptObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<RVJavascriptMap>)asMap {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asMap();
        return ::djinni_generated::JavascriptMap::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable RVJavascriptObject *)fromMap:(nullable id<RVJavascriptMap>)value {
    try {
        auto objcpp_result_ = ::JavascriptObject::fromMap(::djinni_generated::JavascriptMap::toCpp(value));
        return ::djinni_generated::JavascriptObject::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto JavascriptObject::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto JavascriptObject::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<RVJavascriptObject>(cpp);
}

}  // namespace djinni_generated

@end
