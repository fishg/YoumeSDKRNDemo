// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#include "NativeJavascriptPromise.hpp"  // my header
#include "Marshal.hpp"
#include "NativeJavascriptArray.hpp"
#include "NativeJavascriptMap.hpp"
#include "NativeJavascriptObject.hpp"

namespace djinni_generated {

NativeJavascriptPromise::NativeJavascriptPromise() : ::djinni::JniInterface<::JavascriptPromise, NativeJavascriptPromise>() {}

NativeJavascriptPromise::~NativeJavascriptPromise() = default;

NativeJavascriptPromise::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeJavascriptPromise::JavaProxy::~JavaProxy() = default;

void NativeJavascriptPromise::JavaProxy::resolveNull() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveNull);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveBoolean(bool c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveBoolean,
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveDouble(double c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveDouble,
                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveInt(int32_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveInt,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveString(const std::string & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveString,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveArray(const std::shared_ptr<::JavascriptArray> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveArray,
                           ::djinni::get(::djinni_generated::NativeJavascriptArray::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveMap(const std::shared_ptr<::JavascriptMap> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveMap,
                           ::djinni::get(::djinni_generated::NativeJavascriptMap::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveObject(const std::shared_ptr<::JavascriptObject> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveObject,
                           ::djinni::get(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::reject(const std::string & c_code, const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptPromise>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_reject,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_code)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
