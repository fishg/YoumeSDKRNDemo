// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#pragma once

#include "JobDispatcher.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeJobDispatcher final : ::djinni::JniInterface<::JobDispatcher, NativeJobDispatcher> {
public:
    using CppType = std::shared_ptr<::JobDispatcher>;
    using CppOptType = std::shared_ptr<::JobDispatcher>;
    using JniType = jobject;

    using Boxed = NativeJobDispatcher;

    ~NativeJobDispatcher();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeJobDispatcher>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeJobDispatcher>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeJobDispatcher();
    friend ::djinni::JniClass<NativeJobDispatcher>;
    friend ::djinni::JniInterface<::JobDispatcher, NativeJobDispatcher>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::JobDispatcher
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void start() override;
        void quit() override;

    private:
        friend ::djinni::JniInterface<::JobDispatcher, ::djinni_generated::NativeJobDispatcher>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/youme/reactcpp/JobDispatcher") };
    const jmethodID method_start { ::djinni::jniGetMethodID(clazz.get(), "start", "()V") };
    const jmethodID method_quit { ::djinni::jniGetMethodID(clazz.get(), "quit", "()V") };
};

}  // namespace djinni_generated
