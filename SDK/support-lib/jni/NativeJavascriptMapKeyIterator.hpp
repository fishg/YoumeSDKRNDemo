// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#pragma once

#include "JavascriptMapKeyIterator.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeJavascriptMapKeyIterator final : ::djinni::JniInterface<::JavascriptMapKeyIterator, NativeJavascriptMapKeyIterator> {
public:
    using CppType = std::shared_ptr<::JavascriptMapKeyIterator>;
    using CppOptType = std::shared_ptr<::JavascriptMapKeyIterator>;
    using JniType = jobject;

    using Boxed = NativeJavascriptMapKeyIterator;

    ~NativeJavascriptMapKeyIterator();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeJavascriptMapKeyIterator>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeJavascriptMapKeyIterator>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeJavascriptMapKeyIterator();
    friend ::djinni::JniClass<NativeJavascriptMapKeyIterator>;
    friend ::djinni::JniInterface<::JavascriptMapKeyIterator, NativeJavascriptMapKeyIterator>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::JavascriptMapKeyIterator
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        bool hasNextKey() override;
        std::string nextKey() override;

    private:
        friend ::djinni::JniInterface<::JavascriptMapKeyIterator, ::djinni_generated::NativeJavascriptMapKeyIterator>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/youme/reactcpp/JavascriptMapKeyIterator") };
    const jmethodID method_hasNextKey { ::djinni::jniGetMethodID(clazz.get(), "hasNextKey", "()Z") };
    const jmethodID method_nextKey { ::djinni::jniGetMethodID(clazz.get(), "nextKey", "()Ljava/lang/String;") };
};

}  // namespace djinni_generated
