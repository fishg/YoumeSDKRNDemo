// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#pragma once

#include "ReactBridge.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeReactBridge final : ::djinni::JniInterface<::ReactBridge, NativeReactBridge> {
public:
    using CppType = std::shared_ptr<::ReactBridge>;
    using CppOptType = std::shared_ptr<::ReactBridge>;
    using JniType = jobject;

    using Boxed = NativeReactBridge;

    ~NativeReactBridge();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeReactBridge>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeReactBridge>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeReactBridge();
    friend ::djinni::JniClass<NativeReactBridge>;
    friend ::djinni::JniInterface<::ReactBridge, NativeReactBridge>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ReactBridge
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::shared_ptr<::JavascriptMap> createMap() override;
        std::shared_ptr<::JavascriptArray> createArray() override;
        std::shared_ptr<::JavascriptMap> copyMap(const std::shared_ptr<::JavascriptMap> & map) override;
        std::shared_ptr<::JavascriptArray> copyArray(const std::shared_ptr<::JavascriptArray> & array) override;
        void emitEventWithMap(const std::string & name, const std::shared_ptr<::JavascriptMap> & params) override;
        void emitEventWithArray(const std::string & name, const std::shared_ptr<::JavascriptArray> & params) override;
        std::shared_ptr<::JobDispatcher> createJobDispatcher(const std::shared_ptr<::JobQueue> & queue) override;

    private:
        friend ::djinni::JniInterface<::ReactBridge, ::djinni_generated::NativeReactBridge>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/youme/reactcpp/ReactBridge") };
    const jmethodID method_createMap { ::djinni::jniGetMethodID(clazz.get(), "createMap", "()Lcom/youme/reactcpp/JavascriptMap;") };
    const jmethodID method_createArray { ::djinni::jniGetMethodID(clazz.get(), "createArray", "()Lcom/youme/reactcpp/JavascriptArray;") };
    const jmethodID method_copyMap { ::djinni::jniGetMethodID(clazz.get(), "copyMap", "(Lcom/youme/reactcpp/JavascriptMap;)Lcom/youme/reactcpp/JavascriptMap;") };
    const jmethodID method_copyArray { ::djinni::jniGetMethodID(clazz.get(), "copyArray", "(Lcom/youme/reactcpp/JavascriptArray;)Lcom/youme/reactcpp/JavascriptArray;") };
    const jmethodID method_emitEventWithMap { ::djinni::jniGetMethodID(clazz.get(), "emitEventWithMap", "(Ljava/lang/String;Lcom/youme/reactcpp/JavascriptMap;)V") };
    const jmethodID method_emitEventWithArray { ::djinni::jniGetMethodID(clazz.get(), "emitEventWithArray", "(Ljava/lang/String;Lcom/youme/reactcpp/JavascriptArray;)V") };
    const jmethodID method_createJobDispatcher { ::djinni::jniGetMethodID(clazz.get(), "createJobDispatcher", "(Lcom/youme/reactcpp/JobQueue;)Lcom/youme/reactcpp/JobDispatcher;") };
};

}  // namespace djinni_generated
