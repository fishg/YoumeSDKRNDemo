// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#include "NativeJavascriptMap.hpp"  // my header
#include "Marshal.hpp"
#include "NativeJavascriptArray.hpp"
#include "NativeJavascriptMapKeyIterator.hpp"
#include "NativeJavascriptObject.hpp"
#include "NativeJavascriptType.hpp"

namespace djinni_generated {

NativeJavascriptMap::NativeJavascriptMap() : ::djinni::JniInterface<::JavascriptMap, NativeJavascriptMap>() {}

NativeJavascriptMap::~NativeJavascriptMap() = default;

NativeJavascriptMap::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeJavascriptMap::JavaProxy::~JavaProxy() = default;

bool NativeJavascriptMap::JavaProxy::hasKey(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_hasKey,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativeJavascriptMap::JavaProxy::isNull(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isNull,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativeJavascriptMap::JavaProxy::getBoolean(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_getBoolean,
                                          ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
double NativeJavascriptMap::JavaProxy::getDouble(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallDoubleMethod(Handle::get().get(), data.method_getDouble,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F64::toCpp(jniEnv, jret);
}
int32_t NativeJavascriptMap::JavaProxy::getInt(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getInt,
                                      ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
std::string NativeJavascriptMap::JavaProxy::getString(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getString,
                                                  ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::shared_ptr<::JavascriptArray> NativeJavascriptMap::JavaProxy::getArray(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getArray,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, jret);
}
std::shared_ptr<::JavascriptMap> NativeJavascriptMap::JavaProxy::getMap(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getMap,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, jret);
}
std::shared_ptr<::JavascriptObject> NativeJavascriptMap::JavaProxy::getObject(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getObject,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptObject::toCpp(jniEnv, jret);
}
::JavascriptType NativeJavascriptMap::JavaProxy::getType(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getType,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptType::toCpp(jniEnv, jret);
}
std::shared_ptr<::JavascriptMapKeyIterator> NativeJavascriptMap::JavaProxy::keySetIterator() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_keySetIterator);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptMapKeyIterator::toCpp(jniEnv, jret);
}
void NativeJavascriptMap::JavaProxy::putNull(const std::string & c_key) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putNull,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putBoolean(const std::string & c_key, bool c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putBoolean,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putDouble(const std::string & c_key, double c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putDouble,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putInt(const std::string & c_key, int32_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putInt,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putString(const std::string & c_key, const std::string & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putString,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putArray(const std::string & c_key, const std::shared_ptr<::JavascriptArray> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putArray,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni_generated::NativeJavascriptArray::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putMap(const std::string & c_key, const std::shared_ptr<::JavascriptMap> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putMap,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni_generated::NativeJavascriptMap::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putObject(const std::string & c_key, const std::shared_ptr<::JavascriptObject> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_putObject,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_key)),
                           ::djinni::get(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::merge(const std::shared_ptr<::JavascriptMap> & c_source) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptMap>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_merge,
                           ::djinni::get(::djinni_generated::NativeJavascriptMap::fromCpp(jniEnv, c_source)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
