// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#include "NativeJavascriptArray.hpp"  // my header
#include "Marshal.hpp"
#include "NativeJavascriptMap.hpp"
#include "NativeJavascriptObject.hpp"
#include "NativeJavascriptType.hpp"

namespace djinni_generated {

NativeJavascriptArray::NativeJavascriptArray() : ::djinni::JniInterface<::JavascriptArray, NativeJavascriptArray>() {}

NativeJavascriptArray::~NativeJavascriptArray() = default;

NativeJavascriptArray::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeJavascriptArray::JavaProxy::~JavaProxy() = default;

int32_t NativeJavascriptArray::JavaProxy::size() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_size);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
bool NativeJavascriptArray::JavaProxy::isNull(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_isNull,
                                          ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativeJavascriptArray::JavaProxy::getBoolean(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_getBoolean,
                                          ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
double NativeJavascriptArray::JavaProxy::getDouble(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallDoubleMethod(Handle::get().get(), data.method_getDouble,
                                         ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F64::toCpp(jniEnv, jret);
}
int32_t NativeJavascriptArray::JavaProxy::getInt(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getInt,
                                      ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
std::string NativeJavascriptArray::JavaProxy::getString(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getString,
                                                  ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::shared_ptr<::JavascriptArray> NativeJavascriptArray::JavaProxy::getArray(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getArray,
                                         ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, jret);
}
std::shared_ptr<::JavascriptMap> NativeJavascriptArray::JavaProxy::getMap(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getMap,
                                         ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, jret);
}
std::shared_ptr<::JavascriptObject> NativeJavascriptArray::JavaProxy::getObject(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getObject,
                                         ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptObject::toCpp(jniEnv, jret);
}
::JavascriptType NativeJavascriptArray::JavaProxy::getType(int32_t c_index) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getType,
                                         ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_index)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeJavascriptType::toCpp(jniEnv, jret);
}
void NativeJavascriptArray::JavaProxy::pushNull() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushNull);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushBoolean(bool c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushBoolean,
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushDouble(double c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushDouble,
                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushInt(int32_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushInt,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushString(const std::string & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushString,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushArray(const std::shared_ptr<::JavascriptArray> & c_array) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushArray,
                           ::djinni::get(::djinni_generated::NativeJavascriptArray::fromCpp(jniEnv, c_array)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushMap(const std::shared_ptr<::JavascriptMap> & c_map) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushMap,
                           ::djinni::get(::djinni_generated::NativeJavascriptMap::fromCpp(jniEnv, c_map)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushObject(const std::shared_ptr<::JavascriptObject> & c_object) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushObject,
                           ::djinni::get(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, c_object)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::append(const std::shared_ptr<::JavascriptArray> & c_source) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeJavascriptArray>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_append,
                           ::djinni::get(::djinni_generated::NativeJavascriptArray::fromCpp(jniEnv, c_source)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
