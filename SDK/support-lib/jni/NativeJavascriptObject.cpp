// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from react.djinni

#include "NativeJavascriptObject.hpp"  // my header
#include "Marshal.hpp"
#include "NativeJavascriptArray.hpp"
#include "NativeJavascriptMap.hpp"
#include "NativeJavascriptType.hpp"

namespace djinni_generated {

NativeJavascriptObject::NativeJavascriptObject() : ::djinni::JniInterface<::JavascriptObject, NativeJavascriptObject>("com/youme/reactcpp/JavascriptObject$CppProxy") {}

NativeJavascriptObject::~NativeJavascriptObject() = default;


CJNIEXPORT void JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::JavascriptObject>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1getType(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->getType();
        return ::djinni::release(::djinni_generated::NativeJavascriptType::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1isNull(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->isNull();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_fromNull(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::JavascriptObject::fromNull();
        return ::djinni::release(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1asBoolean(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->asBoolean();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_fromBoolean(JNIEnv* jniEnv, jobject /*this*/, jboolean j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::JavascriptObject::fromBoolean(::djinni::Bool::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jdouble JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1asDouble(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->asDouble();
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_fromDouble(JNIEnv* jniEnv, jobject /*this*/, jdouble j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::JavascriptObject::fromDouble(::djinni::F64::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1asInt(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->asInt();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_fromInt(JNIEnv* jniEnv, jobject /*this*/, jint j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::JavascriptObject::fromInt(::djinni::I32::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1asString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->asString();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_fromString(JNIEnv* jniEnv, jobject /*this*/, jstring j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::JavascriptObject::fromString(::djinni::String::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1asArray(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->asArray();
        return ::djinni::release(::djinni_generated::NativeJavascriptArray::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_fromArray(JNIEnv* jniEnv, jobject /*this*/, jobject j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::JavascriptObject::fromArray(::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_00024CppProxy_native_1asMap(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::JavascriptObject>(nativeRef);
        auto r = ref->asMap();
        return ::djinni::release(::djinni_generated::NativeJavascriptMap::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_youme_reactcpp_JavascriptObject_fromMap(JNIEnv* jniEnv, jobject /*this*/, jobject j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::JavascriptObject::fromMap(::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, j_value));
        return ::djinni::release(::djinni_generated::NativeJavascriptObject::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
