// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

package com.youme.imrn.jni;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.youme.reactcpp.ReactDjinni;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

/**----------------------------用户管理---------------------------- */
@ReactModule(name = "RNYIMUserInfoManager")
public final class RNYIMUserInfoManager extends ReactContextBaseJavaModule {
    private final CppProxy mModule;

    public RNYIMUserInfoManager(ReactApplicationContext reactContext) {
        super(reactContext);
        mModule = create(ReactDjinni.createReactBridge(reactContext));
    }

    @Override
    public String getName() {
        return "RNYIMUserInfoManager";
    }

    private static native CppProxy create(com.youme.reactcpp.ReactBridge bridge);

    /** 设置用户信息(extraInfo:自定义信息 json格式) */
    @ReactMethod
    public void SetUserInfo(String nickName, int sex, String personalSignature, String country, String province, String city, String extraInfo, Callback callback) {
        mModule.SetUserInfo(nickName, sex, personalSignature, country, province, city, extraInfo, ReactDjinni.wrap(callback));
    }

    /** 设置用户头像 */
    @ReactMethod
    public void SetUserHeadImage(String path, Callback callback) {
        mModule.SetUserHeadImage(path, ReactDjinni.wrap(callback));
    }

    /** 获取用户信息 */
    @ReactMethod
    public void QueryUserInfo(String userID, Callback callback) {
        mModule.QueryUserInfo(userID, ReactDjinni.wrap(callback));
    }

    /** 切换用户状态 */
    @ReactMethod
    public void SwitchUserStatus(String userID, int status, Callback callback) {
        mModule.SwitchUserStatus(userID, status, ReactDjinni.wrap(callback));
    }

    /** 设置好友添加权限 */
    @ReactMethod
    public void SetAddPermission(boolean beFound, int beAddPermission, Callback callback) {
        mModule.SetAddPermission(beFound, beAddPermission, ReactDjinni.wrap(callback));
    }

    /** 设置用户扩展状态 */
//    @ReactMethod
//    public void SetUserExtendStatus(String status, Callback callback) {
//        mModule.SetUserExtendStatus(status, ReactDjinni.wrap(callback));
//    }

    /** 设置头像 */
//    @ReactMethod
//    public void SetHeaderImageUrl(String url, Callback callback) {
//        mModule.SetHeaderImageUrl(url, ReactDjinni.wrap(callback));
//    }

    private static final class CppProxy
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        public void SetUserInfo(String nickName, int sex, String personalSignature, String country, String province, String city, String extraInfo, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetUserInfo(this.nativeRef, nickName, sex, personalSignature, country, province, city, extraInfo, callback);
        }
        private native void native_SetUserInfo(long _nativeRef, String nickName, int sex, String personalSignature, String country, String province, String city, String extraInfo, com.youme.reactcpp.JavascriptCallback callback);

        public void SetUserHeadImage(String path, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetUserHeadImage(this.nativeRef, path, callback);
        }
        private native void native_SetUserHeadImage(long _nativeRef, String path, com.youme.reactcpp.JavascriptCallback callback);

        public void QueryUserInfo(String userID, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_QueryUserInfo(this.nativeRef, userID, callback);
        }
        private native void native_QueryUserInfo(long _nativeRef, String userID, com.youme.reactcpp.JavascriptCallback callback);

        public void SwitchUserStatus(String userID, int status, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SwitchUserStatus(this.nativeRef, userID, status, callback);
        }
        private native void native_SwitchUserStatus(long _nativeRef, String userID, int status, com.youme.reactcpp.JavascriptCallback callback);

        public void SetAddPermission(boolean beFound, int beAddPermission, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetAddPermission(this.nativeRef, beFound, beAddPermission, callback);
        }
        private native void native_SetAddPermission(long _nativeRef, boolean beFound, int beAddPermission, com.youme.reactcpp.JavascriptCallback callback);

//        public void SetUserExtendStatus(String status, com.youme.reactcpp.JavascriptCallback callback)
//        {
//            assert !this.destroyed.get() : "trying to use a destroyed object";
//            native_SetUserExtendStatus(this.nativeRef, status, callback);
//        }
//        private native void native_SetUserExtendStatus(long _nativeRef, String status, com.youme.reactcpp.JavascriptCallback callback);

//        public void SetHeaderImageUrl(String url, com.youme.reactcpp.JavascriptCallback callback)
//        {
//            assert !this.destroyed.get() : "trying to use a destroyed object";
//            native_SetHeaderImageUrl(this.nativeRef, url, callback);
//        }
//        private native void native_SetHeaderImageUrl(long _nativeRef, String url, com.youme.reactcpp.JavascriptCallback callback);
    }
}
