// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

package com.youme.imrn.jni;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.youme.reactcpp.ReactDjinni;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

/**----------------------------消息管理---------------------------- */
@ReactModule(name = "RNYIMMessageManager")
public final class RNYIMMessageManager extends ReactContextBaseJavaModule {
    private final CppProxy mModule;

    public RNYIMMessageManager(ReactApplicationContext reactContext) {
        super(reactContext);
        mModule = create(ReactDjinni.createReactBridge(reactContext));
    }

    @Override
    public String getName() {
        return "RNYIMMessageManager";
    }

    private static native CppProxy create(com.youme.reactcpp.ReactBridge bridge);

    /** 发送文本消息（返回值 errorcode:int 错误码, requestID:string 请求ID） */
    @ReactMethod
    public void SendTextMessage(String receiverID, int chatType, String text,String extra, Callback callback) {
        mModule.SendTextMessage(receiverID, chatType,text ,extra , ReactDjinni.wrap(callback));
    }

    /** 发送语音消息（返回值 errorcode:int 错误码, requestID:string 请求ID） */
    @ReactMethod
    public void SendAudioMessage(String receiverID, int chatType, Callback callback) {
        mModule.SendAudioMessage(receiverID, chatType, ReactDjinni.wrap(callback));
    }

    /** 发送语音消息（不带语音识别）（返回值 errorcode:int 错误码, requestID:string 请求ID） */
    @ReactMethod
    public void SendOnlyAudioMessage(String receiverID, int chatType, Callback callback) {
        mModule.SendOnlyAudioMessage(receiverID, chatType, ReactDjinni.wrap(callback));
    }

    /** 发送文件（返回值 errorcode:int 错误码, requestID:string 请求ID) */
    @ReactMethod
    public void SendFile(String receiverID, int chatType, String filePath, int fileType, String extraParam, Callback callback) {
        mModule.SendFile(receiverID, chatType, filePath, fileType, extraParam, ReactDjinni.wrap(callback));
    }

    /** 停止语音消息 */
    @ReactMethod
    public void StopAudioMessage(String extraParam, Callback callback) {
        mModule.StopAudioMessage(extraParam, ReactDjinni.wrap(callback));
    }

    /** 取消语音消息 */
    @ReactMethod
    public void CancelAudioMessage(Callback callback) {
        mModule.CancelAudioMessage(ReactDjinni.wrap(callback));
    }

    /** 下载文件 */
    @ReactMethod
    public void DownloadFile(String messageID, String savePath, Callback callback) {
        mModule.DownloadFile(messageID, savePath, ReactDjinni.wrap(callback));
    }

    /** 下载文件 */
    @ReactMethod
    public void DownloadFileByUrl(String url, String savePath, Callback callback) {
        mModule.DownloadFileByUrl(url, savePath, ReactDjinni.wrap(callback));
    }

    /** 设置消息是否已读 */
    @ReactMethod
    public void SetMessageRead(String messageID, boolean isRead, Callback callback) {
        mModule.SetMessageRead(messageID, isRead, ReactDjinni.wrap(callback));
    }

    @ReactMethod
    public void SetAllMessageRead(String userID, boolean isRead, Callback callback) {
        mModule.SetAllMessageRead(userID, isRead, ReactDjinni.wrap(callback));
    }

    private static final class CppProxy
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        public void SendTextMessage(String receiverID, int chatType, String text,String extra, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SendTextMessage(this.nativeRef, receiverID, chatType, text, extra, callback);
        }
        private native void native_SendTextMessage(long _nativeRef, String receiverID, int chatType, String text,String extra, com.youme.reactcpp.JavascriptCallback callback);

        public void SendAudioMessage(String receiverID, int chatType, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SendAudioMessage(this.nativeRef, receiverID, chatType, callback);
        }
        private native void native_SendAudioMessage(long _nativeRef, String receiverID, int chatType, com.youme.reactcpp.JavascriptCallback callback);

        public void SendOnlyAudioMessage(String receiverID, int chatType, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SendOnlyAudioMessage(this.nativeRef, receiverID, chatType, callback);
        }
        private native void native_SendOnlyAudioMessage(long _nativeRef, String receiverID, int chatType, com.youme.reactcpp.JavascriptCallback callback);

        public void SendFile(String receiverID, int chatType, String filePath, int fileType, String extraParam, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SendFile(this.nativeRef, receiverID, chatType, filePath, fileType, extraParam, callback);
        }
        private native void native_SendFile(long _nativeRef, String receiverID, int chatType, String filePath, int fileType, String extraParam, com.youme.reactcpp.JavascriptCallback callback);

        public void StopAudioMessage(String extraParam, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_StopAudioMessage(this.nativeRef, extraParam, callback);
        }
        private native void native_StopAudioMessage(long _nativeRef, String extraParam, com.youme.reactcpp.JavascriptCallback callback);

        public void CancelAudioMessage(com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_CancelAudioMessage(this.nativeRef, callback);
        }
        private native void native_CancelAudioMessage(long _nativeRef, com.youme.reactcpp.JavascriptCallback callback);

        public void DownloadFile(String messageID, String savePath, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_DownloadFile(this.nativeRef, messageID, savePath, callback);
        }
        private native void native_DownloadFile(long _nativeRef, String messageID, String savePath, com.youme.reactcpp.JavascriptCallback callback);

        public void DownloadFileByUrl(String url, String savePath, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_DownloadFileByUrl(this.nativeRef, url, savePath, callback);
        }
        private native void native_DownloadFileByUrl(long _nativeRef, String url, String savePath, com.youme.reactcpp.JavascriptCallback callback);

        public void SetMessageRead(String messageID, boolean isRead, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetMessageRead(this.nativeRef, messageID, isRead, callback);
        }
        private native void native_SetMessageRead(long _nativeRef, String messageID, boolean isRead, com.youme.reactcpp.JavascriptCallback callback);

        public void SetAllMessageRead(String userID, boolean isRead, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetAllMessageRead(this.nativeRef, userID, isRead, callback);
        }
        private native void native_SetAllMessageRead(long _nativeRef, String userID, boolean isRead, com.youme.reactcpp.JavascriptCallback callback);
    }
}
