// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

package com.youme.imrn.jni;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.youme.reactcpp.ReactDjinni;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

/**----------------------------TALK---------------------------- */
@ReactModule(name = "RNVoiceEngine")
public final class RNVoiceEngine extends ReactContextBaseJavaModule {
    private final CppProxy mModule;

    public RNVoiceEngine(ReactApplicationContext reactContext) {
        super(reactContext);
        mModule = create(ReactDjinni.createReactBridge(reactContext));
    }

    @Override
    public String getName() {
        return "RNVoiceEngine";
    }

    private static native CppProxy create(com.youme.reactcpp.ReactBridge bridge);

    /** 初始化 */
    @ReactMethod
    public void Init(String appkey, String appsecret, int model, Callback callback) {
        mModule.Init(appkey, appsecret, model, ReactDjinni.wrap(callback));
    }

    /** 加入语音频道 */
    @ReactMethod
    public void JoinChannelSingleMode(String userID, String channel, int userRole, boolean checkRoomExist, Callback callback) {
        mModule.JoinChannelSingleMode(userID, channel, userRole, checkRoomExist, ReactDjinni.wrap(callback));
    }

    /** RestAPI请求 */
    @ReactMethod
    public void RequestRestApi(String command, String queryBody, Callback callback) {
        mModule.RequestRestApi(command, queryBody, ReactDjinni.wrap(callback));
    }

    /** 退出所有语音频道 */
    @ReactMethod
    public void LeaveChannelAll(Callback callback) {
        mModule.LeaveChannelAll(ReactDjinni.wrap(callback));
    }

    /** 设置扬声器静音 */
    @ReactMethod
    public void SetSpeakerMute(boolean on, Callback callback) {
        mModule.SetSpeakerMute(on, ReactDjinni.wrap(callback));
    }

    /** 设置麦克风静音 */
    @ReactMethod
    public void SetMicrophoneMute(boolean mute, Callback callback) {
        mModule.SetMicrophoneMute(mute, ReactDjinni.wrap(callback));
    }

    /** 设置麦克风静音 */
    @ReactMethod
    public void SetOutputToSpeaker(boolean bOutputToSpeaker, Callback callback) {
        mModule.SetOutputToSpeaker(bOutputToSpeaker, ReactDjinni.wrap(callback));
    }

    /** 开启状态发送 */
    @ReactMethod
    public void SetAutoSendStatus(boolean bAuto, Callback callback) {
        mModule.SetAutoSendStatus(bAuto, ReactDjinni.wrap(callback));
    }

    /** 控制其他人的麦克风开关 */
    @ReactMethod
    public void SetOtherMicMute(String userID, boolean mute, Callback callback) {
        mModule.SetOtherMicMute(userID, mute, ReactDjinni.wrap(callback));
    }

    /** 选择消除其他人的语音 */
    @ReactMethod
    public void SetListenOtherVoice(String userID, boolean on, Callback callback) {
        mModule.SetListenOtherVoice(userID, on, ReactDjinni.wrap(callback));
    }

    private static final class CppProxy
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        public void Init(String appkey, String appsecret, int model, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_Init(this.nativeRef, appkey, appsecret, model, callback);
        }
        private native void native_Init(long _nativeRef, String appkey, String appsecret, int model, com.youme.reactcpp.JavascriptCallback callback);

        public void JoinChannelSingleMode(String userID, String channel, int userRole, boolean checkRoomExist, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_JoinChannelSingleMode(this.nativeRef, userID, channel, userRole, checkRoomExist, callback);
        }
        private native void native_JoinChannelSingleMode(long _nativeRef, String userID, String channel, int userRole, boolean checkRoomExist, com.youme.reactcpp.JavascriptCallback callback);

        public void RequestRestApi(String command, String queryBody, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_RequestRestApi(this.nativeRef, command, queryBody, callback);
        }
        private native void native_RequestRestApi(long _nativeRef, String command, String queryBody, com.youme.reactcpp.JavascriptCallback callback);


        public void LeaveChannelAll(com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_LeaveChannelAll(this.nativeRef, callback);
        }
        private native void native_LeaveChannelAll(long _nativeRef, com.youme.reactcpp.JavascriptCallback callback);

        public void SetSpeakerMute(boolean on, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetSpeakerMute(this.nativeRef, on, callback);
        }
        private native void native_SetSpeakerMute(long _nativeRef, boolean on, com.youme.reactcpp.JavascriptCallback callback);

        public void SetMicrophoneMute(boolean mute, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetMicrophoneMute(this.nativeRef, mute, callback);
        }
        private native void native_SetMicrophoneMute(long _nativeRef, boolean mute, com.youme.reactcpp.JavascriptCallback callback);

        public void SetOtherMicMute(String userID, boolean mute, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetOtherMicMute(this.nativeRef, userID, mute, callback);
        }
        private native void native_SetOtherMicMute(long _nativeRef, String userID, boolean mute, com.youme.reactcpp.JavascriptCallback callback);

        public void SetListenOtherVoice(String userID, boolean on, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetListenOtherVoice(this.nativeRef, userID, on, callback);
        }
        private native void native_SetListenOtherVoice(long _nativeRef, String userID, boolean on, com.youme.reactcpp.JavascriptCallback callback);


        public void SetOutputToSpeaker(boolean on, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetOutputToSpeaker(this.nativeRef, on, callback);
        }
        private native void native_SetOutputToSpeaker(long _nativeRef, boolean on, com.youme.reactcpp.JavascriptCallback callback);

        public void SetAutoSendStatus(boolean on, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SetAutoSendStatus(this.nativeRef, on, callback);
        }
        private native void native_SetAutoSendStatus(long _nativeRef, boolean on, com.youme.reactcpp.JavascriptCallback callback);

    }
}
