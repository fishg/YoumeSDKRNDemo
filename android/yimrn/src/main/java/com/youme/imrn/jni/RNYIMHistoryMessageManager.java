// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

package com.youme.imrn.jni;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.youme.reactcpp.ReactDjinni;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

/**----------------------------历史消息管理---------------------------- */
@ReactModule(name = "RNYIMHistoryMessageManager")
public final class RNYIMHistoryMessageManager extends ReactContextBaseJavaModule {
    private final CppProxy mModule;

    public RNYIMHistoryMessageManager(ReactApplicationContext reactContext) {
        super(reactContext);
        mModule = create(ReactDjinni.createReactBridge(reactContext));
    }

    @Override
    public String getName() {
        return "RNYIMHistoryMessageManager";
    }

    private static native CppProxy create(com.youme.reactcpp.ReactBridge bridge);

    /** 查询本地历史消息 */
    @ReactMethod
    public void QueryHistoryMessage(String targetID, int chatType, String startMessageID, int count, int direction, Callback callback) {
        mModule.QueryHistoryMessage(targetID, chatType, startMessageID, count, direction, ReactDjinni.wrap(callback));
    }

    /** 查询服务端房间最近历史消息 */
    @ReactMethod
    public void QueryRoomHistoryMessageFromServer(String roomID, int count, int direction, Callback callback) {
        mModule.QueryRoomHistoryMessageFromServer(roomID, count, direction, ReactDjinni.wrap(callback));
    }

    /** 删除本地历史消息 */
    @ReactMethod
    public void DeleteHistoryMessage(String targetID, int chatType, String startMessageID, int count, Callback callback) {
        mModule.DeleteHistoryMessage(targetID, chatType, startMessageID, count, ReactDjinni.wrap(callback));
    }

    /** 删除本地历史消息 */
    @ReactMethod
    public void DeleteHistoryMessageByID(String messageID, Callback callback) {
        mModule.DeleteHistoryMessageByID(messageID, ReactDjinni.wrap(callback));
    }

    /** 设置是否开启频道历史记录 */
    @ReactMethod
    public void SetRoomHistoryMessageSwitch(String roomID ,boolean save,  Callback callback) {
      mModule.SetRoomHistoryMessageSwitch(roomID, save, ReactDjinni.wrap(callback));
    }

    private static final class CppProxy
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        public void QueryHistoryMessage(String targetID, int chatType, String startMessageID, int count, int direction, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_QueryHistoryMessage(this.nativeRef, targetID, chatType, startMessageID, count, direction, callback);
        }
        private native void native_QueryHistoryMessage(long _nativeRef, String targetID, int chatType, String startMessageID, int count, int direction, com.youme.reactcpp.JavascriptCallback callback);

        public void QueryRoomHistoryMessageFromServer(String roomID, int count, int direction, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_QueryRoomHistoryMessageFromServer(this.nativeRef, roomID, count, direction, callback);
        }
        private native void native_QueryRoomHistoryMessageFromServer(long _nativeRef, String roomID, int count, int direction, com.youme.reactcpp.JavascriptCallback callback);

        public void DeleteHistoryMessage(String targetID, int chatType, String startMessageID, int count, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_DeleteHistoryMessage(this.nativeRef, targetID, chatType, startMessageID, count, callback);
        }
        private native void native_DeleteHistoryMessage(long _nativeRef, String targetID, int chatType, String startMessageID, int count, com.youme.reactcpp.JavascriptCallback callback);

        public void DeleteHistoryMessageByID(String messageID, com.youme.reactcpp.JavascriptCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_DeleteHistoryMessageByID(this.nativeRef, messageID, callback);
        }
        private native void native_DeleteHistoryMessageByID(long _nativeRef, String messageID, com.youme.reactcpp.JavascriptCallback callback);

      public void SetRoomHistoryMessageSwitch(String roomID ,boolean save, com.youme.reactcpp.JavascriptCallback callback)
      {
        assert !this.destroyed.get() : "trying to use a destroyed object";
        native_SetRoomHistoryMessageSwitch(this.nativeRef, roomID, save, callback);
      }
      private native void native_SetRoomHistoryMessageSwitch(long _nativeRef, String roomID,boolean save, com.youme.reactcpp.JavascriptCallback callback);
    }
}
